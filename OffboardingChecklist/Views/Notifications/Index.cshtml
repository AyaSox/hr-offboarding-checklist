@model List<OffboardingChecklist.Models.Notification>

@{
    ViewData["Title"] = "Notifications";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>
        <i class="fas fa-bell text-primary"></i>
        Notifications
    </h1>
    <div>
        @if (Model.Any(n => !n.IsRead))
        {
            <button type="button" class="btn btn-outline-primary" onclick="markAllAsRead()">
                <i class="fas fa-check-double"></i> Mark All as Read
            </button>
        }
        <button type="button" class="btn btn-outline-secondary" onclick="location.reload()">
            <i class="fas fa-sync"></i> Refresh
        </button>
    </div>
</div>

<!-- Notification Statistics -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="card-title">@Model.Count</h4>
                        <p class="card-text">Total</p>
                    </div>
                    <i class="fas fa-bell fa-2x"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-warning text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="card-title">@Model.Count(n => !n.IsRead)</h4>
                        <p class="card-text">Unread</p>
                    </div>
                    <i class="fas fa-envelope fa-2x"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-danger text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="card-title">@Model.Count(n => n.Priority == OffboardingChecklist.Models.NotificationPriority.Critical || n.Priority == OffboardingChecklist.Models.NotificationPriority.High)</h4>
                        <p class="card-text">High Priority</p>
                    </div>
                    <i class="fas fa-exclamation-triangle fa-2x"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-info text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="card-title">@Model.Count(n => n.CreatedOn >= DateTime.Now.AddDays(-1))</h4>
                        <p class="card-text">Today</p>
                    </div>
                    <i class="fas fa-clock fa-2x"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Notification List -->
<div class="card">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-list me-2"></i>All Notifications
        </h5>
    </div>
    <div class="card-body p-0">
        @if (Model.Any())
        {
            <div class="list-group list-group-flush">
                @foreach (var notification in Model)
                {
                    <div class="list-group-item @(notification.IsRead ? "" : "list-group-item-light border-start border-3 border-primary")" id="notification-@notification.Id">
                        <div class="d-flex w-100 justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <div class="d-flex align-items-center mb-2">
                                    <i class="@notification.IconClass me-2"></i>
                                    <h6 class="mb-0 @(notification.IsRead ? "text-muted" : "fw-bold")">
                                        @notification.Title
                                    </h6>
                                    @if (!notification.IsRead)
                                    {
                                        <span class="badge bg-primary ms-2">New</span>
                                    }
                                    @if (notification.Priority == OffboardingChecklist.Models.NotificationPriority.Critical)
                                    {
                                        <span class="badge bg-danger ms-2">Critical</span>
                                    }
                                    else if (notification.Priority == OffboardingChecklist.Models.NotificationPriority.High)
                                    {
                                        <span class="badge bg-warning ms-2">High</span>
                                    }
                                </div>
                                <p class="mb-2 @(notification.IsRead ? "text-muted" : "")">
                                    @notification.Message
                                </p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted">
                                        <i class="fas fa-clock me-1"></i>
                                        @notification.CreatedOn.ToString("MMM dd, yyyy HH:mm") 
                                        (@notification.TimeAgo)
                                    </small>
                                    <div>
                                        @if (!string.IsNullOrEmpty(notification.ActionUrl))
                                        {
                                            <a href="@notification.ActionUrl" class="btn btn-sm btn-outline-primary me-2" onclick="markAsRead(@notification.Id)">
                                                <i class="fas fa-external-link-alt me-1"></i>
                                                @(notification.ActionText ?? "View")
                                            </a>
                                        }
                                        @if (!notification.IsRead)
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-success me-2" onclick="markAsRead(@notification.Id)">
                                                <i class="fas fa-check me-1"></i>Mark Read
                                            </button>
                                        }
                                        <form asp-action="Delete" asp-route-id="@notification.Id" method="post" style="display: inline;">
                                            <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Are you sure you want to delete this notification?')">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-bell-slash fa-3x text-muted mb-3"></i>
                <h5>No Notifications</h5>
                <p class="text-muted">You're all caught up! No notifications to display.</p>
                <a asp-controller="Home" asp-action="Index" class="btn btn-primary">
                    <i class="fas fa-tachometer-alt me-1"></i>Go to Dashboard
                </a>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function markAsRead(notificationId) {
            fetch('/Notifications/MarkAsRead', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify({ id: notificationId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const notificationElement = document.getElementById(`notification-${notificationId}`);
                    if (notificationElement) {
                        notificationElement.classList.remove('list-group-item-light', 'border-start', 'border-3', 'border-primary');
                        const title = notificationElement.querySelector('h6');
                        if (title) {
                            title.classList.remove('fw-bold');
                            title.classList.add('text-muted');
                        }
                        const message = notificationElement.querySelector('p');
                        if (message) {
                            message.classList.add('text-muted');
                        }
                        const newBadge = notificationElement.querySelector('.badge.bg-primary');
                        if (newBadge) {
                            newBadge.remove();
                        }
                        const markReadButton = notificationElement.querySelector('.btn-outline-success');
                        if (markReadButton) {
                            markReadButton.remove();
                        }
                    }
                }
            })
            .catch(error => {
                console.error('Error marking notification as read:', error);
                alert('Error marking notification as read. Please try again.');
            });
        }

        function markAllAsRead() {
            fetch('/Notifications/MarkAllAsRead', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                }
            })
            .catch(error => {
                console.error('Error marking all notifications as read:', error);
                alert('Error marking notifications as read. Please try again.');
            });
        }
    </script>
}