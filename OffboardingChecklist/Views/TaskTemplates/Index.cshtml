@model IEnumerable<OffboardingChecklist.Models.TaskTemplate>

@{
    ViewData["Title"] = "Task Templates";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>
        <i class="fas fa-tasks text-primary"></i>
        Task Templates
    </h1>
    <div>
        <div class="btn-group" role="group">
            <a asp-action="Create" class="btn btn-primary">
                <i class="fas fa-plus"></i> Add Template
            </a>
            <div class="btn-group" role="group">
                <button id="importExportDropdown" type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-exchange-alt"></i> Import/Export
                </button>
                <ul class="dropdown-menu" aria-labelledby="importExportDropdown">
                    <li>
                        <button type="button" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#importModal">
                            <i class="fas fa-file-import"></i> Import from CSV
                        </button>
                    </li>
                    <li>
                        <a class="dropdown-item" asp-action="ExportToCsv">
                            <i class="fas fa-file-export"></i> Export to CSV
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

@if (ViewBag.Departments != null && ((List<string>)ViewBag.Departments).Any())
{
    <div class="card mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <label class="form-label">Filter by Department:</label>
                    <select id="departmentFilter" class="form-select">
                        <option value="">All Departments</option>
                        @foreach (var dept in (List<string>)ViewBag.Departments)
                        {
                            <option value="@dept">@dept</option>
                        }
                    </select>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Filter by Status:</label>
                    <select id="statusFilter" class="form-select">
                        <option value="">All Statuses</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button class="btn btn-outline-secondary" onclick="clearFilters()">
                        <i class="fas fa-times"></i> Clear Filters
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<div class="card">
    <div class="card-body">
        @if (Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover" id="templatesTable">
                    <thead>
                        <tr>
                            <th>Task Name</th>
                            <th>Department</th>
                            <th>Days from Last Day</th>
                            <th>Dependencies</th>
                            <th>Required</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var template in Model)
                        {
                            <tr class="@(!template.IsActive ? "table-secondary" : "")" 
                                data-department="@template.Department.ToLower()" 
                                data-status="@(template.IsActive ? "active" : "inactive")">
                                <td>
                                    <strong>@template.TaskName</strong>
                                    @if (!string.IsNullOrEmpty(template.Description))
                                    {
                                        <br><small class="text-muted">@template.Description</small>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-info">@template.Department</span>
                                </td>
                                <td>
                                    @if (template.DaysFromLastWorkingDay == 0)
                                    {
                                        <span class="text-success">On last day</span>
                                    }
                                    else if (template.DaysFromLastWorkingDay < 0)
                                    {
                                        <span class="text-warning">@Math.Abs(template.DaysFromLastWorkingDay) days before</span>
                                    }
                                    else
                                    {
                                        <span class="text-info">@template.DaysFromLastWorkingDay days after</span>
                                    }
                                </td>
                                <td>
                                    @if (template.DependsOnTemplate != null)
                                    {
                                        <small class="text-muted">
                                            <i class="fas fa-arrow-left"></i>
                                            @template.DependsOnTemplate.TaskName
                                        </small>
                                    }
                                    else
                                    {
                                        <span class="text-muted">None</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-@(template.IsRequired ? "danger" : "secondary")">
                                        @(template.IsRequired ? "Required" : "Optional")
                                    </span>
                                </td>
                                <td>
                                    <span class="badge bg-@(template.IsActive ? "success" : "secondary")">
                                        @(template.IsActive ? "Active" : "Inactive")
                                    </span>
                                </td>
                                <td>
                                    <a asp-action="Edit" asp-route-id="@template.Id" class="btn btn-outline-primary btn-sm">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <form id="delete-form-@template.Id" asp-action="Delete" asp-route-id="@template.Id" method="post" style="display: inline;">
                                        @Html.AntiForgeryToken()
                                        <button type="button" class="btn btn-outline-danger btn-sm" 
                                                onclick="confirmDeleteTemplate(@template.Id, '@Html.Raw(template.TaskName.Replace("'", "\\'"))')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </form>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-4">
                <i class="fas fa-tasks fa-3x text-muted mb-3"></i>
                <h5>No Task Templates Found</h5>
                <p class="text-muted">Get started by adding your first task template.</p>
                <a asp-action="Create" class="btn btn-primary">
                    <i class="fas fa-plus"></i> Add Template
                </a>
            </div>
        }
    </div>
</div>

<!-- Import Modal -->
<div class="modal fade" id="importModal" tabindex="-1" aria-labelledby="importModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="importModalLabel">Import Task Templates</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="ImportFromCsv" method="post" enctype="multipart/form-data">
                <div class="modal-body">
                    <div class="alert alert-info">
                        <strong>CSV Format:</strong> TaskName, Department, Description, DaysFromLastWorkingDay, IsRequired
                    </div>
                    <div class="mb-3">
                        <label for="csvFile" class="form-label">Select CSV File</label>
                        <input type="file" class="form-control" name="csvFile" accept=".csv" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-file-import"></i> Import
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function clearFilters() {
            document.getElementById('departmentFilter').value = '';
            document.getElementById('statusFilter').value = '';
            filterTable();
        }

        function filterTable() {
            const deptFilter = document.getElementById('departmentFilter').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
            const rows = document.querySelectorAll('#templatesTable tbody tr');

            rows.forEach(row => {
                const dept = row.getAttribute('data-department');
                const status = row.getAttribute('data-status');
                
                const deptMatch = !deptFilter || dept.includes(deptFilter);
                const statusMatch = !statusFilter || status === statusFilter;
                
                row.style.display = deptMatch && statusMatch ? '' : 'none';
            });
        }

        document.getElementById('departmentFilter').addEventListener('change', filterTable);
        document.getElementById('statusFilter').addEventListener('change', filterTable);

        function confirmDeleteTemplate(id, name) {
            Swal.fire({
                title: 'Delete Template',
                html: `Are you sure you want to delete the template <strong>"${name}"</strong>?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Delete Template',
                cancelButtonText: 'Cancel',
                focusCancel: true
            }).then((result) => {
                if (result.isConfirmed) {
                    const form = document.getElementById('delete-form-' + id);
                    if (form) form.submit();
                }
            });
        }
    </script>
}