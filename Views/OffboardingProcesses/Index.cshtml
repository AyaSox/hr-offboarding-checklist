@model IEnumerable<OffboardingChecklist.Models.OffboardingProcess>
@using System.Linq

@{
    ViewData["Title"] = "Offboarding Processes";
    bool isHROrAdmin = ViewBag.IsHROrAdmin ?? false;
}

@Html.AntiForgeryToken()

<div class="page-header mb-3">
    <h1>
        <i class="fas fa-clipboard-list text-primary"></i>
        Offboarding Processes
    </h1>
</div>

<div class="subtle-strip mb-4">
    <!-- Enhanced Summary Statistics -->
    <div class="row g-3">
        <div class="col-md-2">
            <div class="card bg-primary text-white h-100">
                <div class="card-body py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <div class="h4 mb-0">@Model.Count()</div>
                            <small>Total</small>
                        </div>
                        <i class="fas fa-clipboard-list fa-lg opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        @if (isHROrAdmin)
        {
            <div class="col-md-2">
                <div class="card bg-warning text-white h-100">
                    <div class="card-body py-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <div class="h4 mb-0">@Model.Count(p => p.Status == OffboardingChecklist.Models.ProcessStatus.PendingApproval)</div>
                                <small>Pending</small>
                            </div>
                            <i class="fas fa-clock fa-lg opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="col-md-2">
            <div class="card bg-info text-white h-100">
                <div class="card-body py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <div class="h4 mb-0">@Model.Count(p => p.Status == OffboardingChecklist.Models.ProcessStatus.Active && !p.IsClosed)</div>
                            <small>Active</small>
                        </div>
                        <i class="fas fa-play-circle fa-lg opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card bg-danger text-white h-100">
                <div class="card-body py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <div class="h4 mb-0">@Model.Count(p => p.OverdueTasksCount > 0)</div>
                            <small>Overdue</small>
                        </div>
                        <i class="fas fa-exclamation-triangle fa-lg opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card bg-success text-white h-100">
                <div class="card-body py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <div class="h4 mb-0">@Model.Count(p => p.IsClosed || p.Status == OffboardingChecklist.Models.ProcessStatus.Closed)</div>
                            <small>Completed</small>
                        </div>
                        <i class="fas fa-check-circle fa-lg opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        @if (isHROrAdmin)
        {
            <div class="col-md-2">
                <div class="card bg-secondary text-white h-100">
                    <div class="card-body py-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <div class="h4 mb-0">@Model.Count(p => p.Status == OffboardingChecklist.Models.ProcessStatus.Rejected)</div>
                                <small>Rejected</small>
                            </div>
                            <i class="fas fa-times-circle fa-lg opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Actions -->
    <div class="mt-3">
        <!-- Create button available to all users -->
        <a asp-action="Create" class="btn btn-primary">
            <i class="fas fa-plus-circle me-1"></i> Create Offboarding Request
        </a>
    </div>
</div>

<!-- Approval Alert for HR/Admin -->
@if (isHROrAdmin)
{
    var pendingApprovalCount = Model.Count(p => p.Status == OffboardingChecklist.Models.ProcessStatus.PendingApproval);
    if (pendingApprovalCount > 0)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <strong>Action Required:</strong> You have <strong>@pendingApprovalCount</strong> process(es) pending approval.
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
}

<!-- Search and Filter Section with Date Range -->
<div class="card mb-4">
    <div class="card-body">
        <div class="d-flex align-items-center justify-content-between mb-3">
            <h5 class="mb-0 section-title"><i class="fas fa-search me-2"></i>Search & Filter</h5>
        </div>
        <form asp-action="Index" method="get" class="row g-3">
            <div class="col-md-3">
                <label for="searchString" class="form-label">Search</label>
                <input type="text" class="form-control" name="searchString" value="@ViewData["CurrentFilter"]" placeholder="Employee name, job title..." />
            </div>
            <div class="col-md-2">
                <label for="statusFilter" class="form-label">Status</label>
                <select class="form-select" name="statusFilter">
                    <option value="">All Statuses</option>
                    @if (isHROrAdmin)
                    {
                        <option value="pending" selected="@(ViewData["StatusFilter"]?.ToString() == "pending")">Pending Approval</option>
                        <option value="approved" selected="@(ViewData["StatusFilter"]?.ToString() == "approved")">Approved</option>
                        <option value="rejected" selected="@(ViewData["StatusFilter"]?.ToString() == "rejected")">Rejected</option>
                    }
                    <option value="active" selected="@(ViewData["StatusFilter"]?.ToString() == "active")">Active</option>
                    <option value="closed" selected="@(ViewData["StatusFilter"]?.ToString() == "closed")">Closed</option>
                    <option value="overdue" selected="@(ViewData["StatusFilter"]?.ToString() == "overdue")">Overdue</option>
                </select>
            </div>
            <div class="col-md-2">
                <label for="departmentFilter" class="form-label">Department</label>
                <select class="form-select" name="departmentFilter">
                    <option value="">All Departments</option>
                    @foreach (var dept in ViewBag.Departments as List<string> ?? new List<string>())
                    {
                        <option value="@dept" selected="@(ViewData["DepartmentFilter"]?.ToString() == dept)">@dept</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label for="startFrom" class="form-label">Start From</label>
                <input type="date" class="form-control" name="startFrom" value="@ViewData["StartFrom"]" />
            </div>
            <div class="col-md-2">
                <label for="startTo" class="form-label">Start To</label>
                <input type="date" class="form-control" name="startTo" value="@ViewData["StartTo"]" />
            </div>
            <div class="col-md-1">
                <label for="pageSize" class="form-label">Page</label>
                <select class="form-select" name="pageSize">
                    @{ var ps = Convert.ToInt32(ViewData["PageSize"] ?? 10); }
                    <option value="10" selected="@(ps == 10)">10</option>
                    <option value="20" selected="@(ps == 20)">20</option>
                    <option value="50" selected="@(ps == 50)">50</option>
                </select>
            </div>
            <div class="col-md-2">
                <label for="sortOrder" class="form-label">Sort By</label>
                <select class="form-select" name="sortOrder">
                    <option value="" selected="@(ViewData["CurrentSort"]?.ToString() == "")">Name (A-Z)</option>
                    <option value="name_desc" selected="@(ViewData["CurrentSort"]?.ToString() == "name_desc")">Name (Z-A)</option>
                    <option value="Date" selected="@(ViewData["CurrentSort"]?.ToString() == "Date")">Date (Oldest)</option>
                    <option value="date_desc" selected="@(ViewData["CurrentSort"]?.ToString() == "date_desc")">Date (Newest)</option>
                    <option value="Progress" selected="@(ViewData["CurrentSort"]?.ToString() == "Progress")">Progress (Low-High)</option>
                    <option value="progress_desc" selected="@(ViewData["CurrentSort"]?.ToString() == "progress_desc")">Progress (High-Low)</option>
                </select>
            </div>
            <div class="col-md-12 d-flex align-items-end justify-content-between">
                <div>
                    <button type="submit" class="btn btn-outline-primary me-2">
                        <i class="fas fa-search"></i> Filter
                    </button>
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        <i class="fas fa-times"></i> Clear
                    </a>
                </div>
                <div>
                    @{ var currentPage = Convert.ToInt32(ViewData["Page"] ?? 1); var totalPages = Convert.ToInt32(ViewBag.TotalPages ?? 1); }
                    <nav aria-label="Page navigation">
                        <ul class="pagination mb-0">
                            <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { searchString = ViewData["CurrentFilter"], statusFilter = ViewData["StatusFilter"], departmentFilter = ViewData["DepartmentFilter"], sortOrder = ViewData["CurrentSort"], startFrom = ViewData["StartFrom"], startTo = ViewData["StartTo"], page = currentPage - 1, pageSize = ViewData["PageSize"] })">
                                    Previous
                                </a>
                            </li>
                            <li class="page-item disabled"><span class="page-link">Page @currentPage of @totalPages</span></li>
                            <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { searchString = ViewData["CurrentFilter"], statusFilter = ViewData["StatusFilter"], departmentFilter = ViewData["DepartmentFilter"], sortOrder = ViewData["CurrentSort"], startFrom = ViewData["StartFrom"], startTo = ViewData["StartTo"], page = currentPage + 1, pageSize = ViewData["PageSize"] })">
                                    Next
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Processes Table -->
<div class="card">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="mb-0 section-title"><i class="fas fa-table me-2"></i>Process List</h5>
            @if (isHROrAdmin && Model.Any(p => p.IsActive))
            {
                <div class="d-flex align-items-center">
                    <small class="text-muted me-3">
                        <i class="fas fa-info-circle me-1"></i>
                        Select processes to bulk complete their tasks
                    </small>
                    <button type="button" class="btn btn-outline-success btn-sm" data-bs-toggle="modal" data-bs-target="#bulkActionModal">
                        <i class="fas fa-check-double"></i> Bulk Complete Tasks
                    </button>
                </div>
            }
        </div>
        @if (Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>
                                @if (isHROrAdmin)
                                {
                                    <input type="checkbox" id="selectAll" class="form-check-input">
                                }
                            </th>
                            <th>Employee</th>
                            <th>Job Title</th>
                            <th>Started</th>
                            <th>Last Day</th>
                            <th>Status</th>
                            <th>Progress</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var process in Model)
                        {
                            <tr class="@(process.OverdueTasksCount > 0 ? "table-warning" : "") @(process.Status == OffboardingChecklist.Models.ProcessStatus.PendingApproval ? "table-info" : "")">
                                <td>
                                    @if (isHROrAdmin && process.IsActive)
                                    {
                                        <input type="checkbox" class="form-check-input process-checkbox" value="@process.Id">
                                    }
                                </td>
                                <td>
                                    <div>
                                        <strong>@process.EmployeeName</strong>
                                        <br>
                                        <small class="text-muted">@process.YearsOfService.ToString("F1") years service</small>
                                    </div>
                                </td>
                                <td>@process.JobTitle</td>
                                <td>
                                    @process.StartDate.ToString("MMM dd, yyyy")
                                    <br>
                                    <small class="text-muted">@process.ProcessDurationDays days ago</small>
                                </td>
                                <td>
                                    @process.LastWorkingDay.ToString("MMM dd, yyyy")
                                    @if (!process.IsClosed && process.LastWorkingDay < DateTime.Now)
                                    {
                                        <br><small class="text-danger">Already left</small>
                                    }
                                </td>
                                <td>
                                    <partial name="_StatusBadge" model="process" />
                                    @if (process.Status == OffboardingChecklist.Models.ProcessStatus.PendingApproval)
                                    {
                                        <br><small class="text-muted">by @process.InitiatedBy</small>
                                    }
                                    else if (process.Status == OffboardingChecklist.Models.ProcessStatus.Approved && process.ApprovedOn.HasValue)
                                    {
                                        <br><small class="text-muted">@process.ApprovedOn.Value.ToString("MMM dd")</small>
                                    }
                                    else if (process.IsClosed && process.ClosedOn.HasValue)
                                    {
                                        <br><small class="text-muted">@process.ClosedOn.Value.ToString("MMM dd")</small>
                                    }
                                    else if (process.Status == OffboardingChecklist.Models.ProcessStatus.Rejected && process.RejectedOn.HasValue)
                                    {
                                        <br><small class="text-muted">@process.RejectedOn.Value.ToString("MMM dd")</small>
                                    }
                                </td>
                                <td>
                                    @if (process.ChecklistItems.Any())
                                    {
                                        <div class="progress" style="height: 20px;">
                                            <div class="progress-bar bg-@(process.ProgressPercent == 100 ? "success" : process.StatusColor)" 
                                                 role="progressbar" 
                                                 style="width: @process.ProgressPercent%">
                                                @process.ProgressPercent.ToString("F0")%
                                            </div>
                                        </div>
                                        <small class="text-muted">
                                            @process.ChecklistItems.Count(c => c.IsCompleted)/@process.ChecklistItems.Count() tasks
                                        </small>
                                    }
                                    else
                                    {
                                        <small class="text-muted">Tasks pending approval</small>
                                    }
                                </td>
                                <!-- Actions Column -->
                                <td>
                                    <div class="btn-group" role="group">
                                        <a asp-action="Details" asp-route-id="@process.Id" class="btn btn-outline-primary btn-sm" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        
                                        @if (isHROrAdmin)
                                        {
                                            @if (process.Status == OffboardingChecklist.Models.ProcessStatus.PendingApproval)
                                            {
                                                <a href="@Url.Action("Details", new { id = process.Id })#approval-actions" class="btn btn-warning btn-sm" title="Pending Approval">
                                                    <i class="fas fa-clock"></i> Review
                                                </a>
                                            }
                                            
                                            @if (process.Status == OffboardingChecklist.Models.ProcessStatus.PendingApproval || 
                                                 process.Status == OffboardingChecklist.Models.ProcessStatus.Rejected ||
                                                 (process.Status == OffboardingChecklist.Models.ProcessStatus.Active && !process.ChecklistItems.Any(c => c.IsCompleted)))
                                            {
                                                <button type="button" class="btn btn-outline-danger btn-sm" 
                                                        onclick="confirmQuickDelete(@process.Id, '@Html.Raw(process.EmployeeName.Replace("'", "\\'"))')" 
                                                        title="Delete Process">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            }
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-4">
                <i class="fas fa-clipboard-list fa-3x text-muted mb-3"></i>
                <h5>No Offboarding Processes Found</h5>
                <p class="text-muted">
                    @if (!string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()))
                    {
                        <span>No processes match your search criteria.</span>
                        <br>
                        <a asp-action="Index" class="btn btn-outline-primary mt-2">Clear Filters</a>
                    }
                    else
                    {
                        <span>Get started by creating your first offboarding request.</span>
                        <br>
                        <a asp-action="Create" class="btn btn-primary mt-2">
                            <i class="fas fa-plus"></i> Create Offboarding Request
                        </a>
                    }
                </p>
            </div>
        }
    </div>
</div>

<!-- Quick Reject Modal -->
<div class="modal fade" id="quickRejectModal" tabindex="-1" aria-labelledby="quickRejectModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="quickRejectModalLabel">
                    <i class="fas fa-times-circle text-danger me-2"></i>Reject Process
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="quickRejectForm" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <p id="rejectEmployeeName"></p>
                    <div class="form-group">
                        <label for="quickRejectionReason" class="form-label">Rejection Reason <span class="text-danger">*</span></label>
                        <textarea name="rejectionReason" id="quickRejectionReason" class="form-control" rows="3" placeholder="Please provide a reason for rejecting this process..." required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-times me-1"></i> Reject Process
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Bulk Action Modal -->
@if (isHROrAdmin)
{
<div class="modal fade" id="bulkActionModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-check-double text-success me-2"></i>
                    Bulk Complete Tasks
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="BulkComplete" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="subtle-strip">
                        <i class="fas fa-info-circle me-2 text-primary"></i>
                        <strong>Bulk Task Completion:</strong> This will mark selected tasks as completed across the chosen processes.
                    </div>
                    <div id="selectedProcessesList" class="mt-3"></div>
                    <div class="form-group mt-3">
                        <label for="bulkComments" class="form-label">
                            <i class="fas fa-comment me-1"></i>Comments for all completed tasks (optional):
                        </label>
                        <textarea name="bulkComments" id="bulkComments" class="form-control" rows="3" placeholder="Add a comment that will be applied to all completed tasks..."></textarea>
                        <div class="form-text">This comment will be added to all tasks that are marked as completed.</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-1"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-check-double me-1"></i>Complete Selected Tasks
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
}

@section Scripts {
    <!-- Sweet Alert 2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <!-- Sweet Alert 2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    
    <script>
        // Select All functionality with null guard
        const selectAllEl = document.getElementById('selectAll');
        if (selectAllEl) {
            selectAllEl.addEventListener('change', function() {
                document.querySelectorAll('.process-checkbox').forEach(cb => cb.checked = this.checked);
            });
        }

        // Auto-submit filter form on select change
        document.querySelectorAll('select[name="statusFilter"], select[name="departmentFilter"], select[name="sortOrder"]').forEach(select => {
            select.addEventListener('change', function() {
                this.form.submit();
            });
        });

        // SweetAlert approval confirmation
        function confirmApprove(event, employeeName) {
            event.preventDefault();
            
            Swal.fire({
                title: 'Approve Process',
                text: `Are you sure you want to approve the offboarding process for ${employeeName}? This will activate the process and send task assignments to departments.`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, Approve',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    event.target.form.submit();
                }
            });
            
            return false;
        }

        // Quick reject modal
        function showRejectModal(processId, employeeName) {
            document.getElementById('quickRejectForm').action = `/OffboardingProcesses/RejectProcess/${processId}`;
            document.getElementById('rejectEmployeeName').textContent = `Rejecting process for: ${employeeName}`;
            document.getElementById('quickRejectionReason').value = '';
            new bootstrap.Modal(document.getElementById('quickRejectModal')).show();
        }

        // Bulk action modal
        document.addEventListener('DOMContentLoaded', function() {
            const bulkModal = document.getElementById('bulkActionModal');
            if (bulkModal) {
                bulkModal.addEventListener('show.bs.modal', function() {
                    const selectedCheckboxes = document.querySelectorAll('.process-checkbox:checked');
                    const selectedList = document.getElementById('selectedProcessesList');
                    
                    if (selectedCheckboxes.length === 0) {
                        selectedList.innerHTML = '<div class="alert alert-warning"><i class="fas fa-exclamation-triangle me-2"></i>No processes selected. Please select processes first by checking the boxes next to them.</div>';
                        return;
                    }

                    // Load tasks for selected processes
                    loadTasksForSelectedProcesses(selectedCheckboxes, selectedList);
                });
            }
        });

        function loadTasksForSelectedProcesses(selectedCheckboxes, selectedList) {
            const processIds = Array.from(selectedCheckboxes).map(cb => cb.value);
            
            // Show loading
            selectedList.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin me-2"></i>Loading tasks...</div>';
            
            // Fetch tasks for selected processes
            fetch('/OffboardingProcesses/GetTasksForProcesses', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ processIds: processIds })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.tasks && data.tasks.length > 0) {
                    let html = '<div class="subtle-strip">';
                    html += '<strong><i class="fas fa-tasks me-2"></i>Found ' + data.tasks.length + ' incomplete task(s) across ' + selectedCheckboxes.length + ' process(es):</strong>';
                    html += '<div class="mt-2" style="max-height: 200px; overflow-y: auto;">';
                    
                    data.tasks.forEach(task => {
                        html += '<div class="form-check">';
                        html += '<input class="form-check-input task-checkbox" type="checkbox" value="' + task.id + '" id="task' + task.id + '" checked>';
                        html += '<label class="form-check-label" for="task' + task.id + '">';
                        html += '<strong>' + task.taskName + '</strong> - ' + task.employeeName + ' (' + task.department + ')';
                        if (task.isOverdue) {
                            html += ' <span class="badge bg-danger ms-1">Overdue</span>';
                        }
                        html += '</label>';
                        html += '</div>'; 
                    });
                    
                    html += '</div>';
                    html += '<div class="mt-2">';
                    html += '<button type="button" class="btn btn-sm btn-outline-primary" onclick="selectAllTasks()">Select All</button> ';
                    html += '<button type="button" class="btn btn-sm btn-outline-secondary" onclick="deselectAllTasks()">Deselect All</button>';
                    html += '</div>';
                    html += '</div>';
                    
                    selectedList.innerHTML = html;
                } else {
                    selectedList.innerHTML = '<div class="subtle-strip"><i class="fas fa-check-circle me-2 text-success"></i>No incomplete tasks found for the selected processes. All tasks may already be completed.</div>';
                }
            })
            .catch(error => {
                console.error('Error loading tasks:', error);
                selectedList.innerHTML = '<div class="subtle-strip"><i class="fas fa-exclamation-circle me-2 text-danger"></i>Error loading tasks. Please try again.</div>';
            });
        }

        function selectAllTasks() {
            document.querySelectorAll('.task-checkbox').forEach(cb => cb.checked = true);
        }

        function deselectAllTasks() {
            document.querySelectorAll('.task-checkbox').forEach(cb => cb.checked = false);
        }

        // Update form submission to send selected task IDs
        const bulkModalEl = document.getElementById('bulkActionModal');
        if (bulkModalEl) {
            bulkModalEl.addEventListener('submit', function(e) {
                const selectedTasks = Array.from(document.querySelectorAll('.task-checkbox:checked')).map(cb => cb.value);
                
                if (selectedTasks.length === 0) {
                    e.preventDefault();
                    alert('Please select at least one task to complete.');
                    return;
                }
                
                // Clear any existing hidden inputs
                const form = e.target;
                const existingInputs = form.querySelectorAll('input[name="selectedTasks"]');
                existingInputs.forEach(input => input.remove());
                
                // Add selected task IDs as hidden inputs
                selectedTasks.forEach(taskId => {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'selectedTasks';
                    input.value = taskId;
                    form.appendChild(input);
                });
            });
        }

        function confirmBulkComplete() {
            return Swal.fire({
                title: 'Bulk Complete Tasks',
                text: 'Are you sure you want to mark all selected tasks as completed?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, Complete Tasks',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                return result.isConfirmed;
            });
        }

        function confirmQuickDelete(processId, employeeName) {
            Swal.fire({
                title: 'Delete Process',
                text: `Are you sure you want to delete the offboarding process for "${employeeName}"?`,
                icon: 'warning',
                html: `
                    <p>Are you sure you want to delete the offboarding process for <strong>"${employeeName}"</strong>?</p>
                    <div class="alert alert-danger mt-3">
                        <small><strong>Warning:</strong> This action cannot be undone and will remove all associated data.</small>
                    </div>
                `,
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, Delete Process',
                cancelButtonText: 'Cancel',
                focusCancel: true
            }).then((result) => {
                if (result.isConfirmed) {
                    // Second confirmation - require typing DELETE
                    Swal.fire({
                        title: 'Final Confirmation',
                        html: `
                            <p>Type <code>DELETE</code> to confirm deletion of <strong>${employeeName}'s</strong> process:</p>
                            <input type="text" id="deleteConfirmInput" class="form-control mt-2" placeholder="Type DELETE here" autocomplete="off">
                        `,
                        icon: 'error',
                        showCancelButton: true,
                        confirmButtonColor: '#dc3545',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Delete Process',
                        cancelButtonText: 'Cancel',
                        preConfirm: () => {
                            const input = document.getElementById('deleteConfirmInput').value;
                            if (input !== 'DELETE') {
                                Swal.showValidationMessage('You must type "DELETE" exactly to confirm');
                                return false;
                            }
                            return true;
                        }
                    }).then((finalResult) => {
                        if (finalResult.isConfirmed) {
                            // Create and submit form for delete action
                            const form = document.createElement('form');
                            form.method = 'POST';
                            form.action = `/OffboardingProcesses/DeleteProcess/${processId}`;
                            
                            // Add CSRF token
                            const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]');
                            if (csrfToken) {
                                const tokenInput = document.createElement('input');
                                tokenInput.type = 'hidden';
                                tokenInput.name = '__RequestVerificationToken';
                                tokenInput.value = csrfToken.value;
                                form.appendChild(tokenInput);
                            }
                            
                            // Add confirmation text
                            const confirmInput = document.createElement('input');
                            confirmInput.type = 'hidden';
                            confirmInput.name = 'confirmationText';
                            confirmInput.value = 'DELETE';
                            form.appendChild(confirmInput);
                            
                            document.body.appendChild(form);
                            form.submit();
                        }
                    });
                }
            });
        }
    </script>
}